# ========== PARTICAL SWARM OPTIMIZATION SIMULATION - 3d Yin Yang ==========================# # 	EXAMPLE: 	minimize 	f(x, y) = x * e^-(x^2 + y^2)#		#	GROUP MEMBERS:	 Emily Le, Mathew Dohlen, Steven Sairafian, Wynne Tran## =========================================================================================# ========== DEFINE CONSTANTS & FUNCTIONS =================================================##	n 			= number of particles in the system#	c1, c2 		= importace weight of personal and global best#					- usually c1 + c2 = 4 or c1 = c1 = 2#	vMax		= speed of particles from iteration to iteration#	iteration 	= number of iterations before ending the program#	# ========================================================================================= global npart = 50; c1 = 0.5;c2 = 0.5;vMax = 0.05;iteration = 50;%265;	 B = 2; %fpr sombrero# DEFINED FUNCTION:  will return z values of the graph given x and y valuesfunction retval = f(xx, yy)	retval = xx .* e.^(-(xx.^2 + yy.^2));endfunction# DEFINED FUNCTION:  will return z values of the graph given x and y valuesfunction retval = f2(xx, yy)  retval = - sin (sqrt (xx.^2 + yy.^2)) / (sqrt (xx.^2 + yy.^2))endfunction# DEFINED FUNCTION: finds gBestfunction retval = findGBest(gBest, position)	for i = 1:50		if (f(position(i,1), position(i,2)) < f(gBest(1), gBest(2)))			gBest = position(i,:);		endif	endfor	retval = gBest;endfunction# ========== INITIALIZATION ===============================================================## 	initialzing initial positions, vectors, lBest, gBest for the first iteration## =========================================================================================# vectorvector = zeros(npart,2);# positionposition =  zeros(npart,2);z = zeros(npart,1);x = (rand(1,npart)* 4) - 2; y = (rand(1,npart)* 4) - 2;for i = 1:npart	position(i,1) = x(i);	position(i,2) = y(i);	z(i,1) = f(x(i),y(i));endfor# lBestlBest = position;# gBestgBest = zeros(1,2) + 1000;gBest = findGBest(gBest, position);# ========== PLOT INITIAL POINTS ON GRAPH =====================================================#  # `Will plot the initial scatter plot on mesh grapgh for the first iteration#	`	- note that the velocities are initilzed to be 0# # =============================================================================================%graphPSO(position(:,1), position(:,2), z, 100);%hold on;clf;%		figure(1, "position", [0,0, 1200, 1000]);		tx = linspace(-2, 2, 41);		ty = linspace(-2, 2, 41);		[xx, yy] = meshgrid (tx, ty);		tz = xx .* e.^(-(xx.^2 + yy.^2)); %yin Yang function		mesh(tx,ty,tz);    hold on;		# scatter plot overlay    %scatter3(x,y,z);        %hold on;    c = zeros(npart,3);    c(:,1) = 1;		h = scatter3(x, y, z,50,c,"filled");   % hold on;# ========== PSO ITERATION =====================================================================## 	Based on the formula:##		v[] = v[] + c1 * rand() * (pbest[] - present[]) + c2 * rand() * (gbest[] - present[]) #		present[] = persent[] + v[] ##	This essentially will update the velocity that will be used to update the new position after#	each iteration.## ==============================================================================================%cols=["blue" ;"black" ;"cyan"; "green"; "magenta" ; "red" ; "white"; "yellow"];for i = 1:iteration	for j = 1:npart		prevPosition = position;		r1 = rand(1,1);		r2 = rand(1,1);		vector(j,:) = vector(j,:) + c1 * r1 * (lBest(j,:) - position(j,:)) + c2 * r2 * (gBest - position(j,:));		# Limit x-coordinate velocities		if (vector(j,1) > vMax)			vector(j,1) = vMax;		elseif (vector(j,1) < -vMax)			vector(j,1) = -vMax;		endif		# Limit y-coordinate velocities		if (vector(j,2) > vMax)			vector(j,2) = vMax;		elseif (vector(j,2) < -vMax)			vector(j,2) = -vMax;		endif		# update x and y values		position(j,:) = position(j,:) + vector(j,:);				# update lBest and gBest values		if (f(position(j,1), position(j,2)) > f(prevPosition(j,1),prevPosition(j,2)))			lBest(j,:) = prevPosition(j,:);		endif		# update z values		z(j,1) = f(position(j,1),position(j,2));	endfor                                            	gBest = findGBest(gBest, position);	# draw updated graph  pause(0.00001);  axis([-B B -B B -B/4 B/4]); %to prevent axis resizing   set (h, 'ydata', position(:,2));  set (h, 'xdata', position(:,1));  set (h, 'zdata', z);endfor